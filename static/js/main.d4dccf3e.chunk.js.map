{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","memo","movies","map","imdbId","FindMovie","setMovies","useState","query","setQuery","setMovie","isError","setIsError","isLoading","setIsLoading","normalizedMovieData","url","Title","Plot","Poster","imdbID","onSubmit","event","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","movieData","finally","htmlFor","type","id","placeholder","cn","value","onChange","target","disabled","onClick","newMovie","find","m","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4dccf3e.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Movie } from '../../types/Movie';\n\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img data-cy=\"moviePoster\" src={movie.imgUrl} alt=\"Film logo\" />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img src=\"images/imdb-logo.jpeg\" alt=\"imdb\" />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">\n            {movie.title}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React, { memo } from 'react';\n\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\nimport './MoviesList.scss';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = memo(({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n));\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\n\nimport { MovieData } from '../../types/MovieData';\nimport { Movie } from '../../types/Movie';\n\nimport './FindMovie.scss';\n\ntype Props = {\n  movies: Movie[];\n  setMovies: (movies: Movie[]) => void;\n};\n\nconst DEFAULT_PICTURE\n  = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nconst getImgUrl = (url: string) => {\n  return url === 'N/A'\n    ? DEFAULT_PICTURE\n    : url;\n};\n\nexport const FindMovie: React.FC<Props> = ({ movies, setMovies }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<MovieData | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleInput = (value: string) => {\n    setQuery(value);\n    setIsError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    getMovie(query)\n      .then((movieData) => ('imdbID' in movieData\n        ? setMovie(movieData)\n        : setIsError(true)))\n      .finally(() => setIsLoading(false));\n  };\n\n  const normalizedMovieData = ({\n    Title,\n    Plot,\n    Poster,\n    imdbID,\n  }: MovieData) => {\n    return {\n      title: Title,\n      description: Plot,\n      imgUrl: getImgUrl(Poster),\n      imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n      imdbId: imdbID,\n    };\n  };\n\n  const handleAddMovie = (newMovie: Movie) => {\n    if (!movies.find((m) => m.imdbId === newMovie.imdbId)) {\n      setMovies([...movies, newMovie]);\n    }\n\n    setQuery('');\n    setMovie(null);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', {\n                'is-danger': isError,\n              })}\n              value={query}\n              onChange={(event) => handleInput(event.target.value)}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button', 'is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAddMovie(normalizedMovieData(movie))}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={normalizedMovieData(movie)} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=4a7706ef';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\n\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie movies={movies} setMovies={setMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}